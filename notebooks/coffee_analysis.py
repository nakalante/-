# -*- coding: utf-8 -*-
"""ДЗ №10 Творческая. Заказы на кофейное зерно.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mn38CywNHJdQJFf88fe9uIHexMJ0x81q
"""

# Загрузим все необходимые библиотеки
import os
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import plotly as py
import plotly.io as pio
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot

from google.colab import drive
drive.mount('/content/drive')

coff = '/content/drive/My Drive/Colab Notebooks/BHR Coffee.csv'
df = pd.read_csv(coff)
print(df)

df.head()

df['Date'] = pd.to_datetime(df['Date'], format='%d.%m.%Y')

fig = go.Figure()
fig.add_scatter(x=df.Date, y=df['1'], line=dict(color='green'))
fig.update_xaxes(rangeslider_visible=True) # Обновляем ось Х, добавляя в нее ползунок диапазона
fig.update_layout(
  title='Продажи 500г пачек кофе поштучно',
  xaxis_title='Дата',
  yaxis_title='Количество пачек кофе в шт'
                  )
fig.show()

fig = go.Figure()
fig.add_scatter(x=df.Date, y=df['0,5'], line=dict(color='blue'))
fig.update_xaxes(rangeslider_visible=True) # Обновляем ось Х, добавляя в нее ползунок диапазона
fig.update_layout(
  title='Продажи 500г пачек кофе поштучно',
  xaxis_title='Дата',
  yaxis_title='Количество пачек кофе в шт'
                  )
fig.show()

fig = go.Figure()
fig.add_scatter(x=df.Date, y=df['0,2'], line=dict(color='red'))
fig.update_xaxes(rangeslider_visible=True) # Обновляем ось Х, добавляя в нее ползунок диапазона
fig.update_layout(
  title='Продажи 200г пачек кофе поштучно',
  xaxis_title='Дата',
  yaxis_title='Количество пачек кофе в шт'
                  )
fig.show()

fig = go.Figure()
fig.add_scatter(x=df.Date, y=df['All coffee'], line=dict(color='grey'))
fig.update_xaxes(rangeslider_visible=True) # Обновляем ось Х, добавляя в нее ползунок диапазона
# Добавляем заголовок к графику
fig.update_layout(
    title='Продажи кофе по датам в кг',
    xaxis_title='Дата',
    yaxis_title='Количество кофе в кг'
)
fig.show()

"""Наблюдения и выводы относительно графика продаж общего объема кофе.

1. Январь 20-22 числах спад продаж по причине предварительных больших новогодних заказов в декабре.
2. Высокий спрос зафиксирован в апреле 21-22 числах(предположительно когда теплеет и из-за праздников).
3. Также декабрь не менее нагруженный месяц, кофейни заказывают больше в преддверии январских праздников.
4. В период с января 2024 по май 2025 выводим следующие показаели:
"""

average1 = df['All coffee'].max()
average2 = df['All coffee'].mean()
average3 = df['All coffee'].min()
print(f"Максимальное значение за период 'All coffee': {average1} кг")
print(f"Среднее значение за период 'All coffee': {average2} кг")
print(f"Минимальное значение за период 'All coffee': {average3} кг")

import plotly.graph_objects as go

# Создаем график
fig = go.Figure()

# Исторические данные
fig.add_scatter(
    x=df['Date'],
    y=df['All coffee'],
    name='Исторические данные',
    line=dict(color='grey')
)

# Прогноз
forecast_dates = pd.date_range(
    start=df['Date'].iloc[-1] + pd.Timedelta(days=7),  # Продолжаем с последней даты + неделя
    periods=12,  # 12 шагов вперед
    freq='W'     # Частота (еженедельно)
)
fig.add_scatter(
    x=forecast_dates,
    y=forecast.predicted_mean,
    name='Прогноз',
    line=dict(color='red')
)

# Настройки осей и бегунка
fig.update_layout(
    title='Прогноз продаж кофе на 12 недель вперед',
    xaxis_title='Дата',
    yaxis_title='Количество кофе (кг)',
    xaxis=dict(
        rangeslider=dict(visible=True),  # Включаем бегунок
        type='date'                      # Формат дат
    )
)

fig.show()

"""Прогнозируем будущие заказы кофе у производства. 29 Июня ожидается запрос на покупку кофе в размере 7 тонн жареного кофе.
Минимальный заказ ожидается 13 июля (но обычно июль это жаркий месяц, мне кажется заказ будет больше, посмотрим в след месяце).
Пик прогноза приходится на 7 сентября. Тенденция к росту заказов со временем сохраняется. Вывод: производстово должно быть готово к такому объему заказов. В последующие месяцы можно будет сравнить прогноз с реальными данными, далее можно корректировать модель и делать ее лучше. Также со временем эту модель можно улучшить если добавить зависимость дневной температуры и спроса на кофе.

Источник данных, еженедельные закази 200+ кофеен по всей РФ и немного за рубежом.
Модель для прогноза SARIMA.
Погодные условия сильно влияют на спрос кофе. В дальнейшем планирую собрать данные по среднему значению температуры на неделю с помощью парсинга, сравнив это с количеством заказанного кофе.

Ключевая цель проекта: Добиться максимальной точности прогнозирования.
"""